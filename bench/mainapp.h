/**
 * @file:mainapp.h   -
 * @description: Main application class for BenchBoard software
 * @project: BENCH OnSemiconductor
 * @date: 2014\11\27 13-38-18
 *
 */


#ifndef MAINAPP_H
#define MAINAPP_H


#include <QObject>

/* generic */

#include "applet.h"
#include "mainwindow.h"
#include <QFileSystemWatcher>

/* modules generic */
#include "v.h"                  // automatically generated by version vergen.exe
#include "logs.h"               // logs applet
#include "serialportchannel.h"  // serial port channel communication 
#include "settings.h"
#include "QSettings"

#ifdef USE_VEC_INTERPRETER
    #include "vec_interpreter.h"    // vector interpreter applet
#endif

#ifdef USE_SCANCHAIN
    #include "scan_chain.h"
#endif

#include <QMutex>


/* extension for workspace save files*/
#define G_DEFAULT_WORKSPACE_EXT   "bench"

#ifdef DEBUG_MODE
    #define TRACE(...) qDebug(__VA_ARGS__)
#else
    #define  TRACE(format, ...)
#endif


class MainApp;


/* declare global pointer */
extern MainApp      *g_BenchApplication;
#define MAINAPP     g_BenchApplication // for global access
#define BENCH()     g_BenchApplication // for global access
#define MCU       (*MAINAPP->board())
#define MAINWINDOW  BENCH()->mp_MainWindow

/* this is project name list*/
static const char PROJECT_NAME[] = QMAKE_TARGET;
/* project class name */
static const char PROJECT_CLASS[] = "Bench";



/* ftdi connector pointers */
#ifdef USE_FTDI
    #include "ftdispichannel.h"     // ftdi communication
  #define FTDI1     g_FtdiChannel1
  #define FTDI2     g_FtdiChannel2
  extern FtdiSpiChannel *g_FtdiChannel1;
  extern FtdiSpiChannel *g_FtdiChannel2;
#elif USE_CONTROLLER
    #define MCU       (*MAINAPP->board())
    #include "controlboard.h"       // text protocol parsing class
    #include "bootloader.h"
#elif USE_MPP
    #define MPP       (*MAINAPP->board())
    #include "mppboard.h"
#elif USE_SERPORT
    #define SPORT     (*MAINAPP->board())
    #include "serport.h"
#endif


/* local server (NamedPipe communication interface) */
#define LOCALSERVER_SET(NAME,VAL) MAINAPP->set(NAME,VAL)
#define LOCALSERVER_GET(NAME,PDATA) MAINAPP->get(NAME,PDATA)
#define LOCALSERVER_RUN(NAME,PAR,PDATA) MAINAPP->run(NAME,PAR,PDATA)


#define MAINAPP_UART_NORMAL (115200)
#define MAINAPP_UART_TURBO  (115200*20)

#ifdef PROJECT_TYPES
    static const char *MAINAPP_PROJECT_TYPES[]={PROJECT_TYPES};
#endif


/* local server (NamedPipe communication interface)*/
#include "localserver.h"

/* singletone MainApp object*/
class MainApp: public QObject
{
    Q_OBJECT
    MainApp();

signals :    
    /* sends log to log window*/
    void signal_log(int ,QString);
public:

    /* class instance*/
    static MainApp *getInstance();


/* 
*    registering applet creating instance
*   ,adding it to the list and bind with log window
*/
#define REGISTER_APPLET(CLASS)   do{gp_##CLASS = new CLASS(); \
                                         m_AppList[m_AppListCount++]= gp_##CLASS;\
                                        }while(0);


    typedef enum
    {
        BY_NAME,
        BY_KEY,
        BY_ID
    }AppletFind;


    /* 
        [OPTIONS]         
        BenchApplication settings
        paths, ... 
    */

    void SetWindowVisible(int index);

    void PreventSleep(bool);

    /* read option value */
    const QVariant mainAppConfig(const QString &name);
    /* set options value */
    void setMainAppConfig(const QString &name, const QVariant &value);
    /* 
        [APPLICATION MANAGEMENT] 
        Bench application ,applets , start stop suspend,...
    */
    /*MainApp initialization procedure */
    bool initialize(void);
    /* MainApp start. All roputines which need be started */
    void start(void);
    /* resume applets*/
    void resumeAllApplets();
    /* suspends aplets*/
    void suspendAllApplets();
    /* mainApp stop. All routines need to be made on shutdown 
    of all application */
    void shutdown(void);
    /* To do list*/
    void todo(void);
    /* makes update software . actually runs updater.exe*/    
    void update();
    /* makes update software . actually runs updater.exe*/
    void updateFw();
    /*
        [SETTINGS] 
        register values or some other custom information .
        functions are virtual
    */
    QString m_last_xls_file;
    bool loadExcelConfig();
    void saveBackToExcel(const QString &applet_name = QString());

    void setSetting(const QString &applet, const QString &item, const QVariant &v);
    QVariant setting(const QString &applet, const QString &item, const QVariant &default_value=QVariant());

    /* load Settings of each applet */
    void loadConfig(QString filename=QString());
    /* save settings of applet */
    void saveConfig(void);
    QStringList  cachedDirs();
    void putDirToCache(const QString &dir);
    /* 
        [STATE]
         Window geometry, visibility
    */
    /* load applet states */
    void saveWorkspace();
    /* save window states */
    void loadWorkspace();

    /*
        [WINDOWS]
        pointers to mainwindow and aplets
    */
    /* returns mainwindow pointer*/
    MainWindow *mainWindow();   
    /* find applet pointer by name*/
    static Applet* findApplet(const QVariant &parameter ,AppletFind find);
    Applet *applet(int i) {return m_AppList[i];}
    /* applets count in main app*/
    qint32 appletsCount();
    /* closes all applet windows*/
    void closeAllApplets();
    /* close all but active window/applet */
    void closeAllButActive();
    /* 
        [COMMMUNICATION] 
        hardware communication with benchboard
    */
    /*  opens channel connection */
    bool openBoardConnection(const QString &channel_name);
    /* if hardware channel is connected*/
    bool isBoardConnected();
    /* close hardware communication channel */
    void closeBoardConnection();
    /* init channel connection*/
    bool initBoardConnection();

    #ifdef USE_FTDI
    #elif USE_MPP
     MppBoard* board(void )    const;
     MppBoard *mp_MppBoard;


    #elif USE_CONTROLLER
    /* returns mcu pointer*/
    ControlBoard * board(void) const ;
    /* text protocol pointer */
    ControlBoard *mp_McuProtocol;
    Bootloader *mp_fwbldr;
    #elif USE_SERPORT
    SerPort * board(void) const;
    SerPort *mp_SerPort;
    #endif


    /* is in logger mode */
    bool logMode()const;
    void suspend();
    void wakeUp();
    void setProjectType(const QString &project_type) {m_project_type=project_type;}
    const QString &projectType() const {return m_project_type;}
    const QStringList projectTypeList();

    bool quietMode() const {return m_quiet_mode;}
    void setQuietMode(bool on) {m_quiet_mode = on;}
    /*
     *Main app commands
     *This commands belong to MAINAPP class.
     *If you want to call something from MainApp.
    */
    /* main application set*/
    void mainappSet(const QString &name, const QVariant &value);
    /* main application get*/
    void mainappGet(const QString &name, QVariant *pvalue);
    /* main application run*/
    void mainappRun(const QString &name, const QVariant &value, QVariant *presult);
    /* run some python script*/
    static bool runScript(const QString &filename
                          , const QByteArray &parameter, QByteArray *presult);

    LocalServer *localServer() const;
    /* mp_local_connector  connection with named pipe for*/
    LocalServer *mp_local_connector;    
    /* list of applet pointers */
    static Applet *m_AppList[100];
    int m_AppListRecalc[100];
    static int m_AppListCount;
    /* pointer to main window*/
    MainWindow *mp_MainWindow;
    bool m_quiet_mode;
    QString m_project_type;
    QFileSystemWatcher *mp_dirWatcher;
    void autoUpdateConfig();

public slots:
    /*
     APPLET INTERFACE
     This functions will find applet with name Name.xxxx=1
     and call set function in exact applet class.
     Normally user sets /gets data and can issue run command
     to process data or start some opertion with data
     */
    /* set command used for setting data in applet */
    bool set(const QString &name, QVariant &value);
    /* get used for getting some data from applet*/
    bool get(const QString &name, QVariant *pdata_result);
    /* run used for issuing some command */
    bool run(const QString &name, QVariant *pdata_result, QVariant &p1, QVariant &p2, QVariant &p3, QVariant &p4, QVariant &p5);
    /* called if system is disconented (to update ui)*/
    void slot_disconnected();
    /* this called if system is connected */
    void slot_connected();

    void slot_DirectoryChanged();


};


#endif // MAINAPP_H
